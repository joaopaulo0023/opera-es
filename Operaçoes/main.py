# main.py
import os
import streamlit as st
import sqlite3
import hashlib
from datetime import datetime

# ‚Äî‚Äî‚Äî‚Äî‚Äî Configura√ß√µes ‚Äî‚Äî‚Äî‚Äî‚Äî
st.set_page_config(page_title="üîê Login", layout="centered")

DB_PATH = "usuarios.db"
FUNCOES = [
    "L√≠der",
    "Separa√ß√£o 1",
    "Separa√ß√£o 2",
    "Corredor",
    "Gate",
    "Faturamento",
    "Carregamento",
    "Separa√ß√£o Toyota, PSA, Nissan"
]

# ‚Äî‚Äî‚Äî‚Äî‚Äî Fun√ß√µes auxiliares ‚Äî‚Äî‚Äî‚Äî‚Äî
def hash_senha(senha: str) -> str:
    return hashlib.sha256(senha.encode()).hexdigest()

# ‚Äî Verifica credenciais ‚Äî
def verificar_credenciais(username: str, senha: str) -> bool:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT password_hash FROM usuarios WHERE username = ?", (username,))
    row = cursor.fetchone()
    conn.close()
    return bool(row and hash_senha(senha) == row[0])

# ‚Äî Adiciona novo usu√°rio ‚Äî
def adicionar_usuario(username: str, senha: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO usuarios (username, password_hash, funcao) VALUES (?, ?, ?)",
            (username, hash_senha(senha), "")
        )
        conn.commit()
        st.success("‚úÖ Usu√°rio adicionado com sucesso!")
    except sqlite3.IntegrityError:
        st.error("‚ö†Ô∏è Usu√°rio j√° existe.")
    conn.close()

# ‚Äî‚Äî‚Äî‚Äî‚Äî Interface Streamlit ‚Äî‚Äî‚Äî‚Äî‚Äî
st.title("üîê Sistema Log√≠stico com IA")

# Inicializa sess√£o
if "logado" not in st.session_state:
    st.session_state.logado = False
    st.session_state.usuario = ""
    st.session_state.funcao = ""

# ‚Äî‚Äî‚Äî TELA DE LOGIN ‚Äî‚Äî‚Äî
if not st.session_state.logado:
    usuario      = st.text_input("Usu√°rio")
    senha        = st.text_input("Senha", type="password")
    funcao_login = st.selectbox("Fun√ß√£o", FUNCOES)
    if st.button("Login"):
        conn   = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT password_hash, funcao FROM usuarios WHERE username = ?",
            (usuario,)
        )
        row = cursor.fetchone()
        conn.close()

        if not row:
            st.error("Usu√°rio n√£o cadastrado.")
        else:
            password_hash_db, funcao_db = row
            if hash_senha(senha) != password_hash_db:
                st.error("Senha incorreta.")
            elif funcao_login == "L√≠der" and funcao_db != "L√≠der":
                st.error("Voc√™ n√£o tem permiss√£o para a fun√ß√£o ‚ÄúL√≠der‚Äù.")
            else:
                st.session_state.logado  = True
                st.session_state.usuario = usuario
                st.session_state.funcao  = funcao_login
                st.rerun()
    st.stop()

# === P√ìS-LOGIN ===
now  = datetime.now()
hour = now.hour
if hour < 12:
    cumprimento = "Bom dia"
elif hour < 18:
    cumprimento = "Boa tarde"
else:
    cumprimento = "Boa noite"

st.sidebar.title("Menu")
st.sidebar.write(f"üë§ {st.session_state.usuario}")
st.sidebar.write(f"üß© {st.session_state.funcao}")
if st.sidebar.button("Logout"):
    st.session_state.logado   = False
    st.session_state.usuario  = ""
    st.session_state.funcao   = ""
    st.rerun()

st.header(f"{cumprimento}, {st.session_state.usuario}!")
st.write(f"Voc√™ est√° na fun√ß√£o **{st.session_state.funcao}** hoje.")

# ‚Äî‚Äî‚Äî‚Äî‚Äî Relat√≥rio de atividade por fun√ß√£o ‚Äî‚Äî‚Äî‚Äî‚Äî
func = st.session_state.funcao
q = None

if func.startswith("Separa√ß√£o"):
    st.info("Assim que voc√™ separar alguns paletes, informe abaixo quantos foram separados.")
    q = st.text_input("Paletes separados:", key="input_sep")
elif func == "Corredor":
    st.info("Assim que voc√™ amarrar paletes, informe quantos foram amarrados.")
    q = st.text_input("Paletes amarrados:", key="input_cor")
elif func == "Gate":
    st.info("Assim que voc√™ montar paletes, informe quantas tartarugas foram batidas.")
    q = st.text_input("Tartarugas batidas:", key="input_gate")
elif func == "Carregamento":
    st.info("Assim que voc√™ carregar, informe quantos paletes foram carregados.")
    q = st.text_input("Paletes carregados:", key="input_car")
elif func == "Faturamento":
    st.info("Assim que voc√™ gerar notas fiscais, informe quantas NFs foram geradas.")
    q = st.text_input("NFs geradas:", key="input_fat")
else:
    st.info("Use o menu de cadastro ou de tarefas conforme sua fun√ß√£o.")

if q is not None and st.button("Enviar relat√≥rio"):
    try:
        quantidade = int(q)
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO relatorios (usuario, funcao, quantidade)
            VALUES (?, ?, ?)
        """, (
            st.session_state.usuario,
            st.session_state.funcao,
            quantidade
        ))
        conn.commit()
        conn.close()
        st.success(f"‚úÖ Registrado: {quantidade} para {func}.")
    except ValueError:
        st.error("Por favor, entre com um n√∫mero inteiro v√°lido.")

# ‚Äî‚Äî‚Äî‚Äî‚Äî Listagem de tarefas por fun√ß√£o ‚Äî‚Äî‚Äî‚Äî‚Äî
st.markdown("---")
st.subheader("üîî Suas Tarefas")
conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()
cursor.execute(
    "SELECT id, descricao, concluido FROM tarefas WHERE funcao = ? ORDER BY prioridade DESC",
    (st.session_state.funcao,)
)
tarefas = cursor.fetchall()
conn.close()

for tid, desc, done in tarefas:
    marcado = st.checkbox(desc, value=bool(done), key=f"tarefa_{tid}")
    if marcado and not done:
        cconn = sqlite3.connect(DB_PATH); cc = cconn.cursor()
        cc.execute("UPDATE tarefas SET concluido = 1 WHERE id = ?", (tid,))
        cconn.commit(); cconn.close()
    elif not marcado and done:
        cconn = sqlite3.connect(DB_PATH); cc = cconn.cursor()
        cc.execute("UPDATE tarefas SET concluido = 0 WHERE id = ?", (tid,))
        cconn.commit(); cconn.close()

# ‚Äî‚Äî‚Äî‚Äî‚Äî Registrar quantidade em fun√ß√£o auxiliar ‚Äî‚Äî‚Äî‚Äî‚Äî
st.markdown("---")
st.subheader("‚ûï Registrar Quantidade em Outra Fun√ß√£o")

# Remove a op√ß√£o "L√≠der" da lista de fun√ß√µes auxiliares
funcoes_ajuda = [f for f in FUNCOES if f != "L√≠der"]

with st.form("ajuda_quant_form"):
    func_ajuda = st.selectbox("Em qual fun√ß√£o voc√™ ajudou?", funcoes_ajuda)
    qtd_ajuda  = st.text_input("Quantidade executada:")
    submit_ajuda = st.form_submit_button("Registrar ajuda")
    if submit_ajuda:
        try:
            qtd = int(qtd_ajuda)
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO relatorios (usuario, funcao, quantidade) VALUES (?, ?, ?)",
                (st.session_state.usuario, func_ajuda, qtd)
            )
            conn.commit()
            conn.close()
            st.success(f"‚úÖ Registrado: {qtd} em {func_ajuda}.")
        except ValueError:
            st.error("Por favor, insira um n√∫mero inteiro v√°lido.")


# ‚Äî‚Äî‚Äî‚Äî‚Äî Hist√≥rico de registros auxiliares ‚Äî‚Äî‚Äî‚Äî‚Äî
st.markdown("**Hist√≥rico de registros auxiliares:**")
conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()
cursor.execute(
    "SELECT funcao, quantidade, timestamp FROM relatorios WHERE usuario = ? AND funcao != ? ORDER BY timestamp DESC", 
    (st.session_state.usuario, st.session_state.funcao)
)
aux_historico = cursor.fetchall()
conn.close()

if aux_historico:
    for f, qtd, ts in aux_historico:
        st.write(f"- {f}: {qtd} em {ts}")
else:
    st.write("Nenhum registro auxiliar encontrado.")

# ‚Äî‚Äî‚Äî‚Äî‚Äî Cadastro de novos usu√°rios (apenas L√≠der) ‚Äî‚Äî‚Äî‚Äî‚Äî
if st.session_state.funcao == "L√≠der":
    st.markdown("---")
    st.subheader("üÜï Cadastrar Novo Colaborador")

    with st.form("form_cadastro_usuario"):
        novo_usuario = st.text_input("Novo nome de usu√°rio")
        nova_senha = st.text_input("Senha", type="password")
        nova_funcao = st.selectbox("Fun√ß√£o", FUNCOES)
        submit_cadastro = st.form_submit_button("Cadastrar")

        if submit_cadastro:
            if not novo_usuario or not nova_senha:
                st.warning("‚ö†Ô∏è Usu√°rio e senha s√£o obrigat√≥rios.")
            else:
                conn = sqlite3.connect(DB_PATH)
                cursor = conn.cursor()
                try:
                    cursor.execute(
                        "INSERT INTO usuarios (username, password_hash, funcao) VALUES (?, ?, ?)",
                        (novo_usuario, hash_senha(nova_senha), nova_funcao)
                    )
                    conn.commit()
                    st.success(f"‚úÖ Usu√°rio '{novo_usuario}' cadastrado com sucesso.")
                except sqlite3.IntegrityError:
                    st.error("‚ùå Este nome de usu√°rio j√° existe.")
                conn.close()
